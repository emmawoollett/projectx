# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI tests

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]

jobs:
  
  frontend-setup:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache frontend node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-frontend-node-modules
        with:
          path: ~/frontend/node_modules/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend build
      - name: Save frontend build folder
        uses: actions/upload-artifact@v1
        with:
          name: frontend-build-folder
          path: frontend/build/

  docker-setup:
    needs: frontend-setup
    runs-on: ubuntu-20.04
    
    name: docker setup

    steps:
      - uses: actions/checkout@v2
      - name: Download frontend build
        uses: actions/download-artifact@v2
        with:
          name: frontend-build-folder
          path: frontend/build/
      - run: docker-compose pull
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - run: docker-compose build

  python-setup:
    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
        python-version: ['3.x']
    
    name: python ${{ matrix.python-version }} setup
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      
      - run: pip install -r backend/requirements/test.txt
      
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  python-unittests:
    needs: python-setup
    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
        python-version: ['3.x']
    
    name: python ${{ matrix.python-version }} unittest
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - run: pip install -r backend/requirements/test.txt
      - run: cd backend && python -m pytest

  system-tests:
    needs: docker-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: yarn --cwd tests install
      - run: yarn --cwd tests ci

  frontend-lint:
    needs: frontend-setup
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache frontend node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-frontend-node-modules
        with:
          path: ~/frontend/node_modules/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - run: yarn --cwd frontend install
      - run: yarn --cwd frontend lint
